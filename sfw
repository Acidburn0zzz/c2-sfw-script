#!/usr/bin/perl

#	<VirtualHost *:80>
#	        ServerName sfw.c2.com
#	        Header add Access-Control-Allow-Origin "*"
#	        ScriptAlias / /home/httpd/cgi-bin/sfw/
#	</VirtualHost>

my $SEP = "\263";
my ($title, $slug, $path);
$_ = $ENV{'PATH_INFO'};

if (/^\/([a-z-]+)\.json/) { &servePage($1) }
elsif (/^\/favicon.(ico|png)/) { print "Location: http://ward.c2.com/favicon.png\n\n"; }
elsif (/^\/$/) { print "Content-type: text/html\n\n", `curl -s http://fed.wiki.org`; }
elsif (/^\/system\/sitemap.json/) { &serveSitemap() }
else { print "Location: http://fed.wiki.org$ENV{'REQUEST_URI'}\n\n"; }

sub sitemapEntry {
        ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size, $atime,$mtime,$ctime,$blksize,$blocks) = stat("wiki.wdb/$_");
        $title = $slug = $_;
        $title =~ s/([a-z])([A-Z])/$1 $2/g;
        $slug =~ s/([a-z])([A-Z])/$1-$2/g;
        $slug = lc $slug;
        return <<;
{"slug":"$slug", "title":"$title", "date":${mtime}000}

}

sub serveSitemap {
	print "Content-type: text/json\n\n";
	@pages = split "\n", `ls -t wiki.wdb | head -300`;
	print "[", join(",", map(&sitemapEntry(), @pages)), "]\n";
}

sub servePage {
	$title = $slug = $path = $_[0];
	$path =~ s/-([a-z])/\U$1/g;
	$path =~ s/^([a-z])/wiki.wdb\/\U$1/;
	$title =~ s/^([a-z])/\U$1/;
	$title =~ s/-([a-z])/ \U$1/g;
	print "Status: 404 Not Found\r\n" unless -f $path;
	print "Content-type: text/plain\n\n";
	&convert($path);
}

sub randomid {
	sprintf("%08d",rand(10**8)).sprintf("%08d",rand(10**8));
}

sub page {
	my ($slug,$title,$story,$d) = @_;
	$id = randomid();
	my $a = <<;
{"date": $d,  "id": "$id", "type": "create", "item": {"title": "$title", "story": $story}}

	$page =~ s/}$/,"journal":[]}/;
	print <<;
{"title": "$title", "story": $story, "journal": [$a]}

}

sub InPlace {
	my ($num) = (@_);
	my ($ref) = $InPlace[$num];
	$ref =~ /https?:\/\/([^\/]+)*/;
	return "[$ref $1]";
}

sub InternalLink {
	my ($title) = $_[0];
	$title =~ s/([a-z])([A-Z])/$1 $2/g;
	"[[$title]]";
}

sub paragraph {
	my ($text) = @_;
	$InPlace=0;
	while ($text =~ s/\b(https?):[^\s<>\[\]"'\(\)]*[^\s<>\[\]"'\(\)\,\.\?]/$SEP$InPlace$SEP/) { $InPlace[$InPlace++] = $&; }
	$text =~ s/\b([A-Z][a-z]+([A-Z][a-z]+)+)\b/&InternalLink($1)/geo;
	$text =~ s/'''(.*?)'''/<b>$1<\/b>/g;
	$text =~ s/''(.*?)''/<i>$1<\/i>/g;
	$text =~ s/\\/\\\\/g;
	$text =~ s/\r?\n/\\n/g;
	$text =~ s/\t/\\t/g;
	$text =~ s/"/\\"/g;
	$text =~s/$SEP(\d+)$SEP/&InPlace($1)/geo;
	$id = randomid();
	return <<;
{"type": "paragraph", "text": "$text", "id": "$id"}

}

sub convert {
	($path) = @_;
	#print "$path\n";
	my $d = `date +%s -r $path`;
        $d =~ s/\n/000/;
	$db = `cat $path`;
	%db = split $SEP, $db;
	$date =$db{'date'};
	$text =$db{'text'};

	@lines = split /\r?\n/, $text;
	@page = ();
	for (@lines) {
		if (/^\s$/) {
			# ignore
		} elsif (/^----+$/) {
			push @page, paragraph "<hr>";

		} else {
			push @page, paragraph $_;
		}
	}
	$page = join ',', @page;
	page $slug, $title, "[$page]", $d;
}

